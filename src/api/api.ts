/* tslint:disable */
/* eslint-disable */
/**
 * API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AuthToken
 */
export interface AuthToken {
    /**
     * 
     * @type {string}
     * @memberof AuthToken
     */
    authToken?: string;
}
/**
 * 
 * @export
 * @interface AuthTokenError
 */
export interface AuthTokenError {
    /**
     * 
     * @type {string}
     * @memberof AuthTokenError
     */
    authToken?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AuthTokenError
     */
    error?: string;
}
/**
 * 
 * @export
 * @interface Comment
 */
export interface Comment {
    /**
     * 
     * @type {number}
     * @memberof Comment
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof Comment
     */
    userId?: number;
    /**
     * 
     * @type {string}
     * @memberof Comment
     */
    userFullName?: string;
    /**
     * 
     * @type {number}
     * @memberof Comment
     */
    sightingId?: number;
    /**
     * 
     * @type {string}
     * @memberof Comment
     */
    content?: string;
}
/**
 * 
 * @export
 * @interface CommentList
 */
export interface CommentList {
    /**
     * 
     * @type {Array<Comment>}
     * @memberof CommentList
     */
    comments?: Array<Comment>;
    /**
     * 
     * @type {Pagination}
     * @memberof CommentList
     */
    meta?: Pagination;
}
/**
 * 
 * @export
 * @interface Favorite
 */
export interface Favorite {
    /**
     * 
     * @type {number}
     * @memberof Favorite
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof Favorite
     */
    userId?: number;
    /**
     * 
     * @type {Flower}
     * @memberof Favorite
     */
    flower?: Flower;
}
/**
 * 
 * @export
 * @interface FavoriteList
 */
export interface FavoriteList {
    /**
     * 
     * @type {Array<Favorite>}
     * @memberof FavoriteList
     */
    sightings?: Array<Favorite>;
    /**
     * 
     * @type {Pagination}
     * @memberof FavoriteList
     */
    meta?: Pagination;
}
/**
 * 
 * @export
 * @interface Flower
 */
export interface Flower {
    /**
     * 
     * @type {number}
     * @memberof Flower
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Flower
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Flower
     */
    latinName?: string;
    /**
     * 
     * @type {number}
     * @memberof Flower
     */
    sightings?: number;
    /**
     * 
     * @type {string}
     * @memberof Flower
     */
    profilePicture?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Flower
     */
    favorite?: boolean;
}
/**
 * 
 * @export
 * @interface FlowerList
 */
export interface FlowerList {
    /**
     * 
     * @type {Array<Flower>}
     * @memberof FlowerList
     */
    flowers?: Array<Flower>;
    /**
     * 
     * @type {Pagination}
     * @memberof FlowerList
     */
    meta?: Pagination;
}
/**
 * 
 * @export
 * @interface InlineObject
 */
export interface InlineObject {
    /**
     * 
     * @type {string}
     * @memberof InlineObject
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject
     */
    password?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject
     */
    dateOfBirth?: string;
}
/**
 * 
 * @export
 * @interface InlineObject1
 */
export interface InlineObject1 {
    /**
     * 
     * @type {string}
     * @memberof InlineObject1
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineObject1
     */
    password?: string;
}
/**
 * 
 * @export
 * @interface InlineObject2
 */
export interface InlineObject2 {
    /**
     * 
     * @type {string}
     * @memberof InlineObject2
     */
    content?: string;
}
/**
 * 
 * @export
 * @interface InlineObject3
 */
export interface InlineObject3 {
    /**
     * 
     * @type {number}
     * @memberof InlineObject3
     */
    flowerId?: number | null;
    /**
     * 
     * @type {string}
     * @memberof InlineObject3
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineObject3
     */
    description?: string | null;
    /**
     * 
     * @type {number}
     * @memberof InlineObject3
     */
    latitude?: number | null;
    /**
     * 
     * @type {number}
     * @memberof InlineObject3
     */
    longitude?: number | null;
}
/**
 * 
 * @export
 * @interface InlineObject4
 */
export interface InlineObject4 {
    /**
     * 
     * @type {string}
     * @memberof InlineObject4
     */
    firstName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineObject4
     */
    lastName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineObject4
     */
    password?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineObject4
     */
    passwordConfirmation?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineObject4
     */
    profilePicture?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineObject4
     */
    dateOfBirth?: string | null;
}
/**
 * 
 * @export
 * @interface Like
 */
export interface Like {
    /**
     * 
     * @type {number}
     * @memberof Like
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof Like
     */
    userId?: number;
    /**
     * 
     * @type {string}
     * @memberof Like
     */
    userFullName?: string;
    /**
     * 
     * @type {number}
     * @memberof Like
     */
    sightingId?: number;
}
/**
 * 
 * @export
 * @interface LikeList
 */
export interface LikeList {
    /**
     * 
     * @type {Array<Like>}
     * @memberof LikeList
     */
    likes?: Array<Like>;
    /**
     * 
     * @type {Pagination}
     * @memberof LikeList
     */
    meta?: Pagination;
}
/**
 * 
 * @export
 * @interface Pagination
 */
export interface Pagination {
    /**
     * 
     * @type {number}
     * @memberof Pagination
     */
    currentPage?: number;
    /**
     * 
     * @type {number}
     * @memberof Pagination
     */
    prevPage?: number;
    /**
     * 
     * @type {number}
     * @memberof Pagination
     */
    nextPage?: number;
    /**
     * 
     * @type {number}
     * @memberof Pagination
     */
    totalPages?: number;
}
/**
 * 
 * @export
 * @interface Sighting
 */
export interface Sighting {
    /**
     * 
     * @type {number}
     * @memberof Sighting
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof Sighting
     */
    flowerId?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Sighting
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Sighting
     */
    description?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Sighting
     */
    latitude?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Sighting
     */
    longitude?: number | null;
}
/**
 * 
 * @export
 * @interface SightingList
 */
export interface SightingList {
    /**
     * 
     * @type {Array<Sighting>}
     * @memberof SightingList
     */
    sightings?: Array<Sighting>;
    /**
     * 
     * @type {Pagination}
     * @memberof SightingList
     */
    meta?: Pagination;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {UserUser}
     * @memberof User
     */
    user?: UserUser;
}
/**
 * 
 * @export
 * @interface UserUser
 */
export interface UserUser {
    /**
     * 
     * @type {number}
     * @memberof UserUser
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof UserUser
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof UserUser
     */
    lastName?: string;
}

/**
 * FavoriteApi - axios parameter creator
 * @export
 */
export const FavoriteApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary shows my favorite flovers
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1FlowersFavoritesGet: async (page?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/flowers/favorites`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary remove that flower from my favorites
         * @param {number} flowerId 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1FlowersFlowerIdFavoritesIdDelete: async (flowerId: number, id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'flowerId' is not null or undefined
            if (flowerId === null || flowerId === undefined) {
                throw new RequiredError('flowerId','Required parameter flowerId was null or undefined when calling apiV1FlowersFlowerIdFavoritesIdDelete.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiV1FlowersFlowerIdFavoritesIdDelete.');
            }
            const localVarPath = `/api/v1/flowers/{flower_id}/favorites/{id}`
                .replace(`{${"flower_id"}}`, encodeURIComponent(String(flowerId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary mark that flower as my favorite
         * @param {number} flowerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1FlowersFlowerIdFavoritesPost: async (flowerId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'flowerId' is not null or undefined
            if (flowerId === null || flowerId === undefined) {
                throw new RequiredError('flowerId','Required parameter flowerId was null or undefined when calling apiV1FlowersFlowerIdFavoritesPost.');
            }
            const localVarPath = `/api/v1/flowers/{flower_id}/favorites`
                .replace(`{${"flower_id"}}`, encodeURIComponent(String(flowerId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FavoriteApi - functional programming interface
 * @export
 */
export const FavoriteApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary shows my favorite flovers
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1FlowersFavoritesGet(page?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FavoriteList>> {
            const localVarAxiosArgs = await FavoriteApiAxiosParamCreator(configuration).apiV1FlowersFavoritesGet(page, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary remove that flower from my favorites
         * @param {number} flowerId 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1FlowersFlowerIdFavoritesIdDelete(flowerId: number, id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Favorite>> {
            const localVarAxiosArgs = await FavoriteApiAxiosParamCreator(configuration).apiV1FlowersFlowerIdFavoritesIdDelete(flowerId, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary mark that flower as my favorite
         * @param {number} flowerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1FlowersFlowerIdFavoritesPost(flowerId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Favorite>> {
            const localVarAxiosArgs = await FavoriteApiAxiosParamCreator(configuration).apiV1FlowersFlowerIdFavoritesPost(flowerId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * FavoriteApi - factory interface
 * @export
 */
export const FavoriteApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary shows my favorite flovers
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1FlowersFavoritesGet(page?: number, options?: any): AxiosPromise<FavoriteList> {
            return FavoriteApiFp(configuration).apiV1FlowersFavoritesGet(page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary remove that flower from my favorites
         * @param {number} flowerId 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1FlowersFlowerIdFavoritesIdDelete(flowerId: number, id: number, options?: any): AxiosPromise<Favorite> {
            return FavoriteApiFp(configuration).apiV1FlowersFlowerIdFavoritesIdDelete(flowerId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary mark that flower as my favorite
         * @param {number} flowerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1FlowersFlowerIdFavoritesPost(flowerId: number, options?: any): AxiosPromise<Favorite> {
            return FavoriteApiFp(configuration).apiV1FlowersFlowerIdFavoritesPost(flowerId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiV1FlowersFavoritesGet operation in FavoriteApi.
 * @export
 * @interface FavoriteApiApiV1FlowersFavoritesGetRequest
 */
export interface FavoriteApiApiV1FlowersFavoritesGetRequest {
    /**
     * 
     * @type {number}
     * @memberof FavoriteApiApiV1FlowersFavoritesGet
     */
    readonly page?: number
}

/**
 * Request parameters for apiV1FlowersFlowerIdFavoritesIdDelete operation in FavoriteApi.
 * @export
 * @interface FavoriteApiApiV1FlowersFlowerIdFavoritesIdDeleteRequest
 */
export interface FavoriteApiApiV1FlowersFlowerIdFavoritesIdDeleteRequest {
    /**
     * 
     * @type {number}
     * @memberof FavoriteApiApiV1FlowersFlowerIdFavoritesIdDelete
     */
    readonly flowerId: number

    /**
     * 
     * @type {number}
     * @memberof FavoriteApiApiV1FlowersFlowerIdFavoritesIdDelete
     */
    readonly id: number
}

/**
 * Request parameters for apiV1FlowersFlowerIdFavoritesPost operation in FavoriteApi.
 * @export
 * @interface FavoriteApiApiV1FlowersFlowerIdFavoritesPostRequest
 */
export interface FavoriteApiApiV1FlowersFlowerIdFavoritesPostRequest {
    /**
     * 
     * @type {number}
     * @memberof FavoriteApiApiV1FlowersFlowerIdFavoritesPost
     */
    readonly flowerId: number
}

/**
 * FavoriteApi - object-oriented interface
 * @export
 * @class FavoriteApi
 * @extends {BaseAPI}
 */
export class FavoriteApi extends BaseAPI {
    /**
     * 
     * @summary shows my favorite flovers
     * @param {FavoriteApiApiV1FlowersFavoritesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FavoriteApi
     */
    public apiV1FlowersFavoritesGet(requestParameters: FavoriteApiApiV1FlowersFavoritesGetRequest = {}, options?: any) {
        return FavoriteApiFp(this.configuration).apiV1FlowersFavoritesGet(requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary remove that flower from my favorites
     * @param {FavoriteApiApiV1FlowersFlowerIdFavoritesIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FavoriteApi
     */
    public apiV1FlowersFlowerIdFavoritesIdDelete(requestParameters: FavoriteApiApiV1FlowersFlowerIdFavoritesIdDeleteRequest, options?: any) {
        return FavoriteApiFp(this.configuration).apiV1FlowersFlowerIdFavoritesIdDelete(requestParameters.flowerId, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary mark that flower as my favorite
     * @param {FavoriteApiApiV1FlowersFlowerIdFavoritesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FavoriteApi
     */
    public apiV1FlowersFlowerIdFavoritesPost(requestParameters: FavoriteApiApiV1FlowersFlowerIdFavoritesPostRequest, options?: any) {
        return FavoriteApiFp(this.configuration).apiV1FlowersFlowerIdFavoritesPost(requestParameters.flowerId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * FlowerApi - axios parameter creator
 * @export
 */
export const FlowerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary List flowers
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1FlowersGet: async (page?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/flowers`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Flower detail
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1FlowersIdGet: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiV1FlowersIdGet.');
            }
            const localVarPath = `/api/v1/flowers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create flower
         * @param {string} [name] 
         * @param {string} [latinName] 
         * @param {string} [description] 
         * @param {string} [features] 
         * @param {any} [profilePicture] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1FlowersPost: async (name?: string, latinName?: string, description?: string, features?: string, profilePicture?: any, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/flowers`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication jwt required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }


            if (name !== undefined) { 
                localVarFormParams.append('name', name as any);
            }
    
            if (latinName !== undefined) { 
                localVarFormParams.append('latin_name', latinName as any);
            }
    
            if (description !== undefined) { 
                localVarFormParams.append('description', description as any);
            }
    
            if (features !== undefined) { 
                localVarFormParams.append('features', features as any);
            }
    
            if (profilePicture !== undefined) { 
                localVarFormParams.append('profile_picture', profilePicture as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List of random flowers
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1FlowersRandomGet: async (page?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/flowers/random`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Flowers matching search results
         * @param {string} query 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1FlowersSearchGet: async (query: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'query' is not null or undefined
            if (query === null || query === undefined) {
                throw new RequiredError('query','Required parameter query was null or undefined when calling apiV1FlowersSearchGet.');
            }
            const localVarPath = `/api/v1/flowers/search`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FlowerApi - functional programming interface
 * @export
 */
export const FlowerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary List flowers
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1FlowersGet(page?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FlowerList>> {
            const localVarAxiosArgs = await FlowerApiAxiosParamCreator(configuration).apiV1FlowersGet(page, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Flower detail
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1FlowersIdGet(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Flower>> {
            const localVarAxiosArgs = await FlowerApiAxiosParamCreator(configuration).apiV1FlowersIdGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Create flower
         * @param {string} [name] 
         * @param {string} [latinName] 
         * @param {string} [description] 
         * @param {string} [features] 
         * @param {any} [profilePicture] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1FlowersPost(name?: string, latinName?: string, description?: string, features?: string, profilePicture?: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Flower>> {
            const localVarAxiosArgs = await FlowerApiAxiosParamCreator(configuration).apiV1FlowersPost(name, latinName, description, features, profilePicture, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary List of random flowers
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1FlowersRandomGet(page?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FlowerList>> {
            const localVarAxiosArgs = await FlowerApiAxiosParamCreator(configuration).apiV1FlowersRandomGet(page, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Flowers matching search results
         * @param {string} query 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1FlowersSearchGet(query: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FlowerList>> {
            const localVarAxiosArgs = await FlowerApiAxiosParamCreator(configuration).apiV1FlowersSearchGet(query, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * FlowerApi - factory interface
 * @export
 */
export const FlowerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary List flowers
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1FlowersGet(page?: number, options?: any): AxiosPromise<FlowerList> {
            return FlowerApiFp(configuration).apiV1FlowersGet(page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Flower detail
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1FlowersIdGet(id: number, options?: any): AxiosPromise<Flower> {
            return FlowerApiFp(configuration).apiV1FlowersIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create flower
         * @param {string} [name] 
         * @param {string} [latinName] 
         * @param {string} [description] 
         * @param {string} [features] 
         * @param {any} [profilePicture] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1FlowersPost(name?: string, latinName?: string, description?: string, features?: string, profilePicture?: any, options?: any): AxiosPromise<Flower> {
            return FlowerApiFp(configuration).apiV1FlowersPost(name, latinName, description, features, profilePicture, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List of random flowers
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1FlowersRandomGet(page?: number, options?: any): AxiosPromise<FlowerList> {
            return FlowerApiFp(configuration).apiV1FlowersRandomGet(page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Flowers matching search results
         * @param {string} query 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1FlowersSearchGet(query: string, options?: any): AxiosPromise<FlowerList> {
            return FlowerApiFp(configuration).apiV1FlowersSearchGet(query, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiV1FlowersGet operation in FlowerApi.
 * @export
 * @interface FlowerApiApiV1FlowersGetRequest
 */
export interface FlowerApiApiV1FlowersGetRequest {
    /**
     * 
     * @type {number}
     * @memberof FlowerApiApiV1FlowersGet
     */
    readonly page?: number
}

/**
 * Request parameters for apiV1FlowersIdGet operation in FlowerApi.
 * @export
 * @interface FlowerApiApiV1FlowersIdGetRequest
 */
export interface FlowerApiApiV1FlowersIdGetRequest {
    /**
     * 
     * @type {number}
     * @memberof FlowerApiApiV1FlowersIdGet
     */
    readonly id: number
}

/**
 * Request parameters for apiV1FlowersPost operation in FlowerApi.
 * @export
 * @interface FlowerApiApiV1FlowersPostRequest
 */
export interface FlowerApiApiV1FlowersPostRequest {
    /**
     * 
     * @type {string}
     * @memberof FlowerApiApiV1FlowersPost
     */
    readonly name?: string

    /**
     * 
     * @type {string}
     * @memberof FlowerApiApiV1FlowersPost
     */
    readonly latinName?: string

    /**
     * 
     * @type {string}
     * @memberof FlowerApiApiV1FlowersPost
     */
    readonly description?: string

    /**
     * 
     * @type {string}
     * @memberof FlowerApiApiV1FlowersPost
     */
    readonly features?: string

    /**
     * 
     * @type {any}
     * @memberof FlowerApiApiV1FlowersPost
     */
    readonly profilePicture?: any
}

/**
 * Request parameters for apiV1FlowersRandomGet operation in FlowerApi.
 * @export
 * @interface FlowerApiApiV1FlowersRandomGetRequest
 */
export interface FlowerApiApiV1FlowersRandomGetRequest {
    /**
     * 
     * @type {number}
     * @memberof FlowerApiApiV1FlowersRandomGet
     */
    readonly page?: number
}

/**
 * Request parameters for apiV1FlowersSearchGet operation in FlowerApi.
 * @export
 * @interface FlowerApiApiV1FlowersSearchGetRequest
 */
export interface FlowerApiApiV1FlowersSearchGetRequest {
    /**
     * 
     * @type {string}
     * @memberof FlowerApiApiV1FlowersSearchGet
     */
    readonly query: string
}

/**
 * FlowerApi - object-oriented interface
 * @export
 * @class FlowerApi
 * @extends {BaseAPI}
 */
export class FlowerApi extends BaseAPI {
    /**
     * 
     * @summary List flowers
     * @param {FlowerApiApiV1FlowersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlowerApi
     */
    public apiV1FlowersGet(requestParameters: FlowerApiApiV1FlowersGetRequest = {}, options?: any) {
        return FlowerApiFp(this.configuration).apiV1FlowersGet(requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Flower detail
     * @param {FlowerApiApiV1FlowersIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlowerApi
     */
    public apiV1FlowersIdGet(requestParameters: FlowerApiApiV1FlowersIdGetRequest, options?: any) {
        return FlowerApiFp(this.configuration).apiV1FlowersIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create flower
     * @param {FlowerApiApiV1FlowersPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlowerApi
     */
    public apiV1FlowersPost(requestParameters: FlowerApiApiV1FlowersPostRequest = {}, options?: any) {
        return FlowerApiFp(this.configuration).apiV1FlowersPost(requestParameters.name, requestParameters.latinName, requestParameters.description, requestParameters.features, requestParameters.profilePicture, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List of random flowers
     * @param {FlowerApiApiV1FlowersRandomGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlowerApi
     */
    public apiV1FlowersRandomGet(requestParameters: FlowerApiApiV1FlowersRandomGetRequest = {}, options?: any) {
        return FlowerApiFp(this.configuration).apiV1FlowersRandomGet(requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Flowers matching search results
     * @param {FlowerApiApiV1FlowersSearchGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlowerApi
     */
    public apiV1FlowersSearchGet(requestParameters: FlowerApiApiV1FlowersSearchGetRequest, options?: any) {
        return FlowerApiFp(this.configuration).apiV1FlowersSearchGet(requestParameters.query, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * FlowerSightingApi - axios parameter creator
 * @export
 */
export const FlowerSightingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary flower sightings
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1FlowersIdSightingsGet: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiV1FlowersIdSightingsGet.');
            }
            const localVarPath = `/api/v1/flowers/{id}/sightings`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FlowerSightingApi - functional programming interface
 * @export
 */
export const FlowerSightingApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary flower sightings
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1FlowersIdSightingsGet(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SightingList>> {
            const localVarAxiosArgs = await FlowerSightingApiAxiosParamCreator(configuration).apiV1FlowersIdSightingsGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * FlowerSightingApi - factory interface
 * @export
 */
export const FlowerSightingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary flower sightings
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1FlowersIdSightingsGet(id: number, options?: any): AxiosPromise<SightingList> {
            return FlowerSightingApiFp(configuration).apiV1FlowersIdSightingsGet(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiV1FlowersIdSightingsGet operation in FlowerSightingApi.
 * @export
 * @interface FlowerSightingApiApiV1FlowersIdSightingsGetRequest
 */
export interface FlowerSightingApiApiV1FlowersIdSightingsGetRequest {
    /**
     * 
     * @type {number}
     * @memberof FlowerSightingApiApiV1FlowersIdSightingsGet
     */
    readonly id: number
}

/**
 * FlowerSightingApi - object-oriented interface
 * @export
 * @class FlowerSightingApi
 * @extends {BaseAPI}
 */
export class FlowerSightingApi extends BaseAPI {
    /**
     * 
     * @summary flower sightings
     * @param {FlowerSightingApiApiV1FlowersIdSightingsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlowerSightingApi
     */
    public apiV1FlowersIdSightingsGet(requestParameters: FlowerSightingApiApiV1FlowersIdSightingsGetRequest, options?: any) {
        return FlowerSightingApiFp(this.configuration).apiV1FlowersIdSightingsGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SightingApi - axios parameter creator
 * @export
 */
export const SightingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary sightings
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SightingsGet: async (page?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/sightings`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary delete sighting
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SightingsIdDelete: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiV1SightingsIdDelete.');
            }
            const localVarPath = `/api/v1/sightings/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary sighting info
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SightingsIdGet: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiV1SightingsIdGet.');
            }
            const localVarPath = `/api/v1/sightings/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary update sighting
         * @param {number} id 
         * @param {InlineObject3} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SightingsIdPut: async (id: number, params?: InlineObject3, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiV1SightingsIdPut.');
            }
            const localVarPath = `/api/v1/sightings/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof params !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(params !== undefined ? params : {}) : (params || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary create sighting
         * @param {number} [flowerId] 
         * @param {string} [name] 
         * @param {string} [description] 
         * @param {number} [latitude] 
         * @param {number} [longitude] 
         * @param {any} [picture] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SightingsPost: async (flowerId?: number, name?: string, description?: string, latitude?: number, longitude?: number, picture?: any, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/sightings`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication jwt required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }


            if (flowerId !== undefined) { 
                localVarFormParams.append('flower_id', flowerId as any);
            }
    
            if (name !== undefined) { 
                localVarFormParams.append('name', name as any);
            }
    
            if (description !== undefined) { 
                localVarFormParams.append('description', description as any);
            }
    
            if (latitude !== undefined) { 
                localVarFormParams.append('latitude', latitude as any);
            }
    
            if (longitude !== undefined) { 
                localVarFormParams.append('longitude', longitude as any);
            }
    
            if (picture !== undefined) { 
                localVarFormParams.append('picture', picture as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SightingApi - functional programming interface
 * @export
 */
export const SightingApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary sightings
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SightingsGet(page?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SightingList>> {
            const localVarAxiosArgs = await SightingApiAxiosParamCreator(configuration).apiV1SightingsGet(page, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary delete sighting
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SightingsIdDelete(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Sighting>> {
            const localVarAxiosArgs = await SightingApiAxiosParamCreator(configuration).apiV1SightingsIdDelete(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary sighting info
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SightingsIdGet(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Sighting>> {
            const localVarAxiosArgs = await SightingApiAxiosParamCreator(configuration).apiV1SightingsIdGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary update sighting
         * @param {number} id 
         * @param {InlineObject3} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SightingsIdPut(id: number, params?: InlineObject3, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Sighting>> {
            const localVarAxiosArgs = await SightingApiAxiosParamCreator(configuration).apiV1SightingsIdPut(id, params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary create sighting
         * @param {number} [flowerId] 
         * @param {string} [name] 
         * @param {string} [description] 
         * @param {number} [latitude] 
         * @param {number} [longitude] 
         * @param {any} [picture] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SightingsPost(flowerId?: number, name?: string, description?: string, latitude?: number, longitude?: number, picture?: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Sighting>> {
            const localVarAxiosArgs = await SightingApiAxiosParamCreator(configuration).apiV1SightingsPost(flowerId, name, description, latitude, longitude, picture, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SightingApi - factory interface
 * @export
 */
export const SightingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary sightings
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SightingsGet(page?: number, options?: any): AxiosPromise<SightingList> {
            return SightingApiFp(configuration).apiV1SightingsGet(page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary delete sighting
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SightingsIdDelete(id: number, options?: any): AxiosPromise<Sighting> {
            return SightingApiFp(configuration).apiV1SightingsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary sighting info
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SightingsIdGet(id: number, options?: any): AxiosPromise<Sighting> {
            return SightingApiFp(configuration).apiV1SightingsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary update sighting
         * @param {number} id 
         * @param {InlineObject3} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SightingsIdPut(id: number, params?: InlineObject3, options?: any): AxiosPromise<Sighting> {
            return SightingApiFp(configuration).apiV1SightingsIdPut(id, params, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary create sighting
         * @param {number} [flowerId] 
         * @param {string} [name] 
         * @param {string} [description] 
         * @param {number} [latitude] 
         * @param {number} [longitude] 
         * @param {any} [picture] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SightingsPost(flowerId?: number, name?: string, description?: string, latitude?: number, longitude?: number, picture?: any, options?: any): AxiosPromise<Sighting> {
            return SightingApiFp(configuration).apiV1SightingsPost(flowerId, name, description, latitude, longitude, picture, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiV1SightingsGet operation in SightingApi.
 * @export
 * @interface SightingApiApiV1SightingsGetRequest
 */
export interface SightingApiApiV1SightingsGetRequest {
    /**
     * 
     * @type {number}
     * @memberof SightingApiApiV1SightingsGet
     */
    readonly page?: number
}

/**
 * Request parameters for apiV1SightingsIdDelete operation in SightingApi.
 * @export
 * @interface SightingApiApiV1SightingsIdDeleteRequest
 */
export interface SightingApiApiV1SightingsIdDeleteRequest {
    /**
     * 
     * @type {number}
     * @memberof SightingApiApiV1SightingsIdDelete
     */
    readonly id: number
}

/**
 * Request parameters for apiV1SightingsIdGet operation in SightingApi.
 * @export
 * @interface SightingApiApiV1SightingsIdGetRequest
 */
export interface SightingApiApiV1SightingsIdGetRequest {
    /**
     * 
     * @type {number}
     * @memberof SightingApiApiV1SightingsIdGet
     */
    readonly id: number
}

/**
 * Request parameters for apiV1SightingsIdPut operation in SightingApi.
 * @export
 * @interface SightingApiApiV1SightingsIdPutRequest
 */
export interface SightingApiApiV1SightingsIdPutRequest {
    /**
     * 
     * @type {number}
     * @memberof SightingApiApiV1SightingsIdPut
     */
    readonly id: number

    /**
     * 
     * @type {InlineObject3}
     * @memberof SightingApiApiV1SightingsIdPut
     */
    readonly params?: InlineObject3
}

/**
 * Request parameters for apiV1SightingsPost operation in SightingApi.
 * @export
 * @interface SightingApiApiV1SightingsPostRequest
 */
export interface SightingApiApiV1SightingsPostRequest {
    /**
     * 
     * @type {number}
     * @memberof SightingApiApiV1SightingsPost
     */
    readonly flowerId?: number

    /**
     * 
     * @type {string}
     * @memberof SightingApiApiV1SightingsPost
     */
    readonly name?: string

    /**
     * 
     * @type {string}
     * @memberof SightingApiApiV1SightingsPost
     */
    readonly description?: string

    /**
     * 
     * @type {number}
     * @memberof SightingApiApiV1SightingsPost
     */
    readonly latitude?: number

    /**
     * 
     * @type {number}
     * @memberof SightingApiApiV1SightingsPost
     */
    readonly longitude?: number

    /**
     * 
     * @type {any}
     * @memberof SightingApiApiV1SightingsPost
     */
    readonly picture?: any
}

/**
 * SightingApi - object-oriented interface
 * @export
 * @class SightingApi
 * @extends {BaseAPI}
 */
export class SightingApi extends BaseAPI {
    /**
     * 
     * @summary sightings
     * @param {SightingApiApiV1SightingsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SightingApi
     */
    public apiV1SightingsGet(requestParameters: SightingApiApiV1SightingsGetRequest = {}, options?: any) {
        return SightingApiFp(this.configuration).apiV1SightingsGet(requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary delete sighting
     * @param {SightingApiApiV1SightingsIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SightingApi
     */
    public apiV1SightingsIdDelete(requestParameters: SightingApiApiV1SightingsIdDeleteRequest, options?: any) {
        return SightingApiFp(this.configuration).apiV1SightingsIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary sighting info
     * @param {SightingApiApiV1SightingsIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SightingApi
     */
    public apiV1SightingsIdGet(requestParameters: SightingApiApiV1SightingsIdGetRequest, options?: any) {
        return SightingApiFp(this.configuration).apiV1SightingsIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary update sighting
     * @param {SightingApiApiV1SightingsIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SightingApi
     */
    public apiV1SightingsIdPut(requestParameters: SightingApiApiV1SightingsIdPutRequest, options?: any) {
        return SightingApiFp(this.configuration).apiV1SightingsIdPut(requestParameters.id, requestParameters.params, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary create sighting
     * @param {SightingApiApiV1SightingsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SightingApi
     */
    public apiV1SightingsPost(requestParameters: SightingApiApiV1SightingsPostRequest = {}, options?: any) {
        return SightingApiFp(this.configuration).apiV1SightingsPost(requestParameters.flowerId, requestParameters.name, requestParameters.description, requestParameters.latitude, requestParameters.longitude, requestParameters.picture, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SightingCommentsApi - axios parameter creator
 * @export
 */
export const SightingCommentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary get comments
         * @param {number} sightingId 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SightingsSightingIdCommentsGet: async (sightingId: number, page?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sightingId' is not null or undefined
            if (sightingId === null || sightingId === undefined) {
                throw new RequiredError('sightingId','Required parameter sightingId was null or undefined when calling apiV1SightingsSightingIdCommentsGet.');
            }
            const localVarPath = `/api/v1/sightings/{sighting_id}/comments`
                .replace(`{${"sighting_id"}}`, encodeURIComponent(String(sightingId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary remove the comment
         * @param {number} sightingId 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SightingsSightingIdCommentsIdDelete: async (sightingId: number, id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sightingId' is not null or undefined
            if (sightingId === null || sightingId === undefined) {
                throw new RequiredError('sightingId','Required parameter sightingId was null or undefined when calling apiV1SightingsSightingIdCommentsIdDelete.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiV1SightingsSightingIdCommentsIdDelete.');
            }
            const localVarPath = `/api/v1/sightings/{sighting_id}/comments/{id}`
                .replace(`{${"sighting_id"}}`, encodeURIComponent(String(sightingId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary create a comment
         * @param {number} sightingId 
         * @param {InlineObject2} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SightingsSightingIdCommentsPost: async (sightingId: number, params?: InlineObject2, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sightingId' is not null or undefined
            if (sightingId === null || sightingId === undefined) {
                throw new RequiredError('sightingId','Required parameter sightingId was null or undefined when calling apiV1SightingsSightingIdCommentsPost.');
            }
            const localVarPath = `/api/v1/sightings/{sighting_id}/comments`
                .replace(`{${"sighting_id"}}`, encodeURIComponent(String(sightingId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof params !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(params !== undefined ? params : {}) : (params || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SightingCommentsApi - functional programming interface
 * @export
 */
export const SightingCommentsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary get comments
         * @param {number} sightingId 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SightingsSightingIdCommentsGet(sightingId: number, page?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommentList>> {
            const localVarAxiosArgs = await SightingCommentsApiAxiosParamCreator(configuration).apiV1SightingsSightingIdCommentsGet(sightingId, page, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary remove the comment
         * @param {number} sightingId 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SightingsSightingIdCommentsIdDelete(sightingId: number, id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Comment>> {
            const localVarAxiosArgs = await SightingCommentsApiAxiosParamCreator(configuration).apiV1SightingsSightingIdCommentsIdDelete(sightingId, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary create a comment
         * @param {number} sightingId 
         * @param {InlineObject2} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SightingsSightingIdCommentsPost(sightingId: number, params?: InlineObject2, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Comment>> {
            const localVarAxiosArgs = await SightingCommentsApiAxiosParamCreator(configuration).apiV1SightingsSightingIdCommentsPost(sightingId, params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SightingCommentsApi - factory interface
 * @export
 */
export const SightingCommentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary get comments
         * @param {number} sightingId 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SightingsSightingIdCommentsGet(sightingId: number, page?: number, options?: any): AxiosPromise<CommentList> {
            return SightingCommentsApiFp(configuration).apiV1SightingsSightingIdCommentsGet(sightingId, page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary remove the comment
         * @param {number} sightingId 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SightingsSightingIdCommentsIdDelete(sightingId: number, id: number, options?: any): AxiosPromise<Comment> {
            return SightingCommentsApiFp(configuration).apiV1SightingsSightingIdCommentsIdDelete(sightingId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary create a comment
         * @param {number} sightingId 
         * @param {InlineObject2} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SightingsSightingIdCommentsPost(sightingId: number, params?: InlineObject2, options?: any): AxiosPromise<Comment> {
            return SightingCommentsApiFp(configuration).apiV1SightingsSightingIdCommentsPost(sightingId, params, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiV1SightingsSightingIdCommentsGet operation in SightingCommentsApi.
 * @export
 * @interface SightingCommentsApiApiV1SightingsSightingIdCommentsGetRequest
 */
export interface SightingCommentsApiApiV1SightingsSightingIdCommentsGetRequest {
    /**
     * 
     * @type {number}
     * @memberof SightingCommentsApiApiV1SightingsSightingIdCommentsGet
     */
    readonly sightingId: number

    /**
     * 
     * @type {number}
     * @memberof SightingCommentsApiApiV1SightingsSightingIdCommentsGet
     */
    readonly page?: number
}

/**
 * Request parameters for apiV1SightingsSightingIdCommentsIdDelete operation in SightingCommentsApi.
 * @export
 * @interface SightingCommentsApiApiV1SightingsSightingIdCommentsIdDeleteRequest
 */
export interface SightingCommentsApiApiV1SightingsSightingIdCommentsIdDeleteRequest {
    /**
     * 
     * @type {number}
     * @memberof SightingCommentsApiApiV1SightingsSightingIdCommentsIdDelete
     */
    readonly sightingId: number

    /**
     * 
     * @type {number}
     * @memberof SightingCommentsApiApiV1SightingsSightingIdCommentsIdDelete
     */
    readonly id: number
}

/**
 * Request parameters for apiV1SightingsSightingIdCommentsPost operation in SightingCommentsApi.
 * @export
 * @interface SightingCommentsApiApiV1SightingsSightingIdCommentsPostRequest
 */
export interface SightingCommentsApiApiV1SightingsSightingIdCommentsPostRequest {
    /**
     * 
     * @type {number}
     * @memberof SightingCommentsApiApiV1SightingsSightingIdCommentsPost
     */
    readonly sightingId: number

    /**
     * 
     * @type {InlineObject2}
     * @memberof SightingCommentsApiApiV1SightingsSightingIdCommentsPost
     */
    readonly params?: InlineObject2
}

/**
 * SightingCommentsApi - object-oriented interface
 * @export
 * @class SightingCommentsApi
 * @extends {BaseAPI}
 */
export class SightingCommentsApi extends BaseAPI {
    /**
     * 
     * @summary get comments
     * @param {SightingCommentsApiApiV1SightingsSightingIdCommentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SightingCommentsApi
     */
    public apiV1SightingsSightingIdCommentsGet(requestParameters: SightingCommentsApiApiV1SightingsSightingIdCommentsGetRequest, options?: any) {
        return SightingCommentsApiFp(this.configuration).apiV1SightingsSightingIdCommentsGet(requestParameters.sightingId, requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary remove the comment
     * @param {SightingCommentsApiApiV1SightingsSightingIdCommentsIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SightingCommentsApi
     */
    public apiV1SightingsSightingIdCommentsIdDelete(requestParameters: SightingCommentsApiApiV1SightingsSightingIdCommentsIdDeleteRequest, options?: any) {
        return SightingCommentsApiFp(this.configuration).apiV1SightingsSightingIdCommentsIdDelete(requestParameters.sightingId, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary create a comment
     * @param {SightingCommentsApiApiV1SightingsSightingIdCommentsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SightingCommentsApi
     */
    public apiV1SightingsSightingIdCommentsPost(requestParameters: SightingCommentsApiApiV1SightingsSightingIdCommentsPostRequest, options?: any) {
        return SightingCommentsApiFp(this.configuration).apiV1SightingsSightingIdCommentsPost(requestParameters.sightingId, requestParameters.params, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SightingLikesApi - axios parameter creator
 * @export
 */
export const SightingLikesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary remove the like
         * @param {number} sightingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SightingsSightingIdLikesDelete: async (sightingId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sightingId' is not null or undefined
            if (sightingId === null || sightingId === undefined) {
                throw new RequiredError('sightingId','Required parameter sightingId was null or undefined when calling apiV1SightingsSightingIdLikesDelete.');
            }
            const localVarPath = `/api/v1/sightings/{sighting_id}/likes`
                .replace(`{${"sighting_id"}}`, encodeURIComponent(String(sightingId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get likes
         * @param {number} sightingId 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SightingsSightingIdLikesGet: async (sightingId: number, page?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sightingId' is not null or undefined
            if (sightingId === null || sightingId === undefined) {
                throw new RequiredError('sightingId','Required parameter sightingId was null or undefined when calling apiV1SightingsSightingIdLikesGet.');
            }
            const localVarPath = `/api/v1/sightings/{sighting_id}/likes`
                .replace(`{${"sighting_id"}}`, encodeURIComponent(String(sightingId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary create a like
         * @param {number} sightingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SightingsSightingIdLikesPost: async (sightingId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sightingId' is not null or undefined
            if (sightingId === null || sightingId === undefined) {
                throw new RequiredError('sightingId','Required parameter sightingId was null or undefined when calling apiV1SightingsSightingIdLikesPost.');
            }
            const localVarPath = `/api/v1/sightings/{sighting_id}/likes`
                .replace(`{${"sighting_id"}}`, encodeURIComponent(String(sightingId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SightingLikesApi - functional programming interface
 * @export
 */
export const SightingLikesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary remove the like
         * @param {number} sightingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SightingsSightingIdLikesDelete(sightingId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Like>> {
            const localVarAxiosArgs = await SightingLikesApiAxiosParamCreator(configuration).apiV1SightingsSightingIdLikesDelete(sightingId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary get likes
         * @param {number} sightingId 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SightingsSightingIdLikesGet(sightingId: number, page?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LikeList>> {
            const localVarAxiosArgs = await SightingLikesApiAxiosParamCreator(configuration).apiV1SightingsSightingIdLikesGet(sightingId, page, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary create a like
         * @param {number} sightingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SightingsSightingIdLikesPost(sightingId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Like>> {
            const localVarAxiosArgs = await SightingLikesApiAxiosParamCreator(configuration).apiV1SightingsSightingIdLikesPost(sightingId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SightingLikesApi - factory interface
 * @export
 */
export const SightingLikesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary remove the like
         * @param {number} sightingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SightingsSightingIdLikesDelete(sightingId: number, options?: any): AxiosPromise<Like> {
            return SightingLikesApiFp(configuration).apiV1SightingsSightingIdLikesDelete(sightingId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get likes
         * @param {number} sightingId 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SightingsSightingIdLikesGet(sightingId: number, page?: number, options?: any): AxiosPromise<LikeList> {
            return SightingLikesApiFp(configuration).apiV1SightingsSightingIdLikesGet(sightingId, page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary create a like
         * @param {number} sightingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SightingsSightingIdLikesPost(sightingId: number, options?: any): AxiosPromise<Like> {
            return SightingLikesApiFp(configuration).apiV1SightingsSightingIdLikesPost(sightingId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiV1SightingsSightingIdLikesDelete operation in SightingLikesApi.
 * @export
 * @interface SightingLikesApiApiV1SightingsSightingIdLikesDeleteRequest
 */
export interface SightingLikesApiApiV1SightingsSightingIdLikesDeleteRequest {
    /**
     * 
     * @type {number}
     * @memberof SightingLikesApiApiV1SightingsSightingIdLikesDelete
     */
    readonly sightingId: number
}

/**
 * Request parameters for apiV1SightingsSightingIdLikesGet operation in SightingLikesApi.
 * @export
 * @interface SightingLikesApiApiV1SightingsSightingIdLikesGetRequest
 */
export interface SightingLikesApiApiV1SightingsSightingIdLikesGetRequest {
    /**
     * 
     * @type {number}
     * @memberof SightingLikesApiApiV1SightingsSightingIdLikesGet
     */
    readonly sightingId: number

    /**
     * 
     * @type {number}
     * @memberof SightingLikesApiApiV1SightingsSightingIdLikesGet
     */
    readonly page?: number
}

/**
 * Request parameters for apiV1SightingsSightingIdLikesPost operation in SightingLikesApi.
 * @export
 * @interface SightingLikesApiApiV1SightingsSightingIdLikesPostRequest
 */
export interface SightingLikesApiApiV1SightingsSightingIdLikesPostRequest {
    /**
     * 
     * @type {number}
     * @memberof SightingLikesApiApiV1SightingsSightingIdLikesPost
     */
    readonly sightingId: number
}

/**
 * SightingLikesApi - object-oriented interface
 * @export
 * @class SightingLikesApi
 * @extends {BaseAPI}
 */
export class SightingLikesApi extends BaseAPI {
    /**
     * 
     * @summary remove the like
     * @param {SightingLikesApiApiV1SightingsSightingIdLikesDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SightingLikesApi
     */
    public apiV1SightingsSightingIdLikesDelete(requestParameters: SightingLikesApiApiV1SightingsSightingIdLikesDeleteRequest, options?: any) {
        return SightingLikesApiFp(this.configuration).apiV1SightingsSightingIdLikesDelete(requestParameters.sightingId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get likes
     * @param {SightingLikesApiApiV1SightingsSightingIdLikesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SightingLikesApi
     */
    public apiV1SightingsSightingIdLikesGet(requestParameters: SightingLikesApiApiV1SightingsSightingIdLikesGetRequest, options?: any) {
        return SightingLikesApiFp(this.configuration).apiV1SightingsSightingIdLikesGet(requestParameters.sightingId, requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary create a like
     * @param {SightingLikesApiApiV1SightingsSightingIdLikesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SightingLikesApi
     */
    public apiV1SightingsSightingIdLikesPost(requestParameters: SightingLikesApiApiV1SightingsSightingIdLikesPostRequest, options?: any) {
        return SightingLikesApiFp(this.configuration).apiV1SightingsSightingIdLikesPost(requestParameters.sightingId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary show user info
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UsersIdGet: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiV1UsersIdGet.');
            }
            const localVarPath = `/api/v1/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary login user and get token back
         * @param {InlineObject1} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UsersLoginPost: async (params?: InlineObject1, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/users/login`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof params !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(params !== undefined ? params : {}) : (params || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary info about me
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UsersMeGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/users/me`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary update my user info
         * @param {InlineObject4} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UsersMePut: async (params?: InlineObject4, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/users/me`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof params !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(params !== undefined ? params : {}) : (params || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary return a fresh jst token back
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UsersMeRefreshGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/users/me/refresh`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary register user and get token back
         * @param {InlineObject} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UsersRegisterPost: async (params?: InlineObject, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/users/register`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof params !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(params !== undefined ? params : {}) : (params || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary show user info
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1UsersIdGet(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).apiV1UsersIdGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary login user and get token back
         * @param {InlineObject1} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1UsersLoginPost(params?: InlineObject1, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthToken>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).apiV1UsersLoginPost(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary info about me
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1UsersMeGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).apiV1UsersMeGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary update my user info
         * @param {InlineObject4} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1UsersMePut(params?: InlineObject4, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).apiV1UsersMePut(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary return a fresh jst token back
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1UsersMeRefreshGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthToken>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).apiV1UsersMeRefreshGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary register user and get token back
         * @param {InlineObject} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1UsersRegisterPost(params?: InlineObject, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthToken>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).apiV1UsersRegisterPost(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary show user info
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UsersIdGet(id: number, options?: any): AxiosPromise<User> {
            return UserApiFp(configuration).apiV1UsersIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary login user and get token back
         * @param {InlineObject1} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UsersLoginPost(params?: InlineObject1, options?: any): AxiosPromise<AuthToken> {
            return UserApiFp(configuration).apiV1UsersLoginPost(params, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary info about me
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UsersMeGet(options?: any): AxiosPromise<User> {
            return UserApiFp(configuration).apiV1UsersMeGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary update my user info
         * @param {InlineObject4} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UsersMePut(params?: InlineObject4, options?: any): AxiosPromise<User> {
            return UserApiFp(configuration).apiV1UsersMePut(params, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary return a fresh jst token back
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UsersMeRefreshGet(options?: any): AxiosPromise<AuthToken> {
            return UserApiFp(configuration).apiV1UsersMeRefreshGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary register user and get token back
         * @param {InlineObject} [params] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UsersRegisterPost(params?: InlineObject, options?: any): AxiosPromise<AuthToken> {
            return UserApiFp(configuration).apiV1UsersRegisterPost(params, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiV1UsersIdGet operation in UserApi.
 * @export
 * @interface UserApiApiV1UsersIdGetRequest
 */
export interface UserApiApiV1UsersIdGetRequest {
    /**
     * 
     * @type {number}
     * @memberof UserApiApiV1UsersIdGet
     */
    readonly id: number
}

/**
 * Request parameters for apiV1UsersLoginPost operation in UserApi.
 * @export
 * @interface UserApiApiV1UsersLoginPostRequest
 */
export interface UserApiApiV1UsersLoginPostRequest {
    /**
     * 
     * @type {InlineObject1}
     * @memberof UserApiApiV1UsersLoginPost
     */
    readonly params?: InlineObject1
}

/**
 * Request parameters for apiV1UsersMePut operation in UserApi.
 * @export
 * @interface UserApiApiV1UsersMePutRequest
 */
export interface UserApiApiV1UsersMePutRequest {
    /**
     * 
     * @type {InlineObject4}
     * @memberof UserApiApiV1UsersMePut
     */
    readonly params?: InlineObject4
}

/**
 * Request parameters for apiV1UsersRegisterPost operation in UserApi.
 * @export
 * @interface UserApiApiV1UsersRegisterPostRequest
 */
export interface UserApiApiV1UsersRegisterPostRequest {
    /**
     * 
     * @type {InlineObject}
     * @memberof UserApiApiV1UsersRegisterPost
     */
    readonly params?: InlineObject
}

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @summary show user info
     * @param {UserApiApiV1UsersIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiV1UsersIdGet(requestParameters: UserApiApiV1UsersIdGetRequest, options?: any) {
        return UserApiFp(this.configuration).apiV1UsersIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary login user and get token back
     * @param {UserApiApiV1UsersLoginPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiV1UsersLoginPost(requestParameters: UserApiApiV1UsersLoginPostRequest = {}, options?: any) {
        return UserApiFp(this.configuration).apiV1UsersLoginPost(requestParameters.params, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary info about me
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiV1UsersMeGet(options?: any) {
        return UserApiFp(this.configuration).apiV1UsersMeGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary update my user info
     * @param {UserApiApiV1UsersMePutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiV1UsersMePut(requestParameters: UserApiApiV1UsersMePutRequest = {}, options?: any) {
        return UserApiFp(this.configuration).apiV1UsersMePut(requestParameters.params, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary return a fresh jst token back
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiV1UsersMeRefreshGet(options?: any) {
        return UserApiFp(this.configuration).apiV1UsersMeRefreshGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary register user and get token back
     * @param {UserApiApiV1UsersRegisterPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiV1UsersRegisterPost(requestParameters: UserApiApiV1UsersRegisterPostRequest = {}, options?: any) {
        return UserApiFp(this.configuration).apiV1UsersRegisterPost(requestParameters.params, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserSightingApi - axios parameter creator
 * @export
 */
export const UserSightingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary users sightings
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UsersIdSightingsGet: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiV1UsersIdSightingsGet.');
            }
            const localVarPath = `/api/v1/users/{id}/sightings`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserSightingApi - functional programming interface
 * @export
 */
export const UserSightingApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary users sightings
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1UsersIdSightingsGet(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SightingList>> {
            const localVarAxiosArgs = await UserSightingApiAxiosParamCreator(configuration).apiV1UsersIdSightingsGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * UserSightingApi - factory interface
 * @export
 */
export const UserSightingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary users sightings
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UsersIdSightingsGet(id: number, options?: any): AxiosPromise<SightingList> {
            return UserSightingApiFp(configuration).apiV1UsersIdSightingsGet(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiV1UsersIdSightingsGet operation in UserSightingApi.
 * @export
 * @interface UserSightingApiApiV1UsersIdSightingsGetRequest
 */
export interface UserSightingApiApiV1UsersIdSightingsGetRequest {
    /**
     * 
     * @type {number}
     * @memberof UserSightingApiApiV1UsersIdSightingsGet
     */
    readonly id: number
}

/**
 * UserSightingApi - object-oriented interface
 * @export
 * @class UserSightingApi
 * @extends {BaseAPI}
 */
export class UserSightingApi extends BaseAPI {
    /**
     * 
     * @summary users sightings
     * @param {UserSightingApiApiV1UsersIdSightingsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserSightingApi
     */
    public apiV1UsersIdSightingsGet(requestParameters: UserSightingApiApiV1UsersIdSightingsGetRequest, options?: any) {
        return UserSightingApiFp(this.configuration).apiV1UsersIdSightingsGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}


